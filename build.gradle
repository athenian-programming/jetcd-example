buildscript {
  ext.atomicfu_version = '0.14.3'

  dependencies {
    classpath "org.jetbrains.kotlinx:atomicfu-gradle-plugin:$atomicfu_version"
  }
}

plugins {
  id 'java'
  id 'org.jetbrains.kotlin.jvm' version '1.3.72' apply false
  id 'org.jetbrains.kotlin.plugin.serialization' version '1.3.72' apply false
  id "com.github.ben-manes.versions" version "0.28.0" apply false
  id 'jacoco'
  id 'com.github.kt3k.coveralls' version '2.10.1' apply false
}

allprojects {
  group 'com.github.pambrose.etcd-recipes'
  version '0.9.20'

  apply plugin: 'org.jetbrains.kotlin.jvm'
  apply plugin: 'org.jetbrains.kotlin.plugin.serialization'
  apply plugin: 'com.github.ben-manes.versions'
  apply plugin: 'jacoco'
  apply plugin: 'com.github.kt3k.coveralls'
  apply plugin: 'kotlinx-atomicfu'

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  repositories {
    maven { url = 'https://maven-central.storage-download.googleapis.com/repos/central/data/' }
    jcenter()
    maven { url = 'https://jitpack.io' }
  }

  configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
  }
}

subprojects {

  dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:${serialization_version}"
    implementation "io.etcd:jetcd-all:${jetcd_version}"
    implementation "com.google.guava:guava:${guava_version}"
    implementation "com.github.pambrose.common-utils:core-utils:${utils_version}"
    implementation "com.github.pambrose.common-utils:guava-utils:${utils_version}"
    implementation "io.github.microutils:kotlin-logging:${logging_version}"
    implementation "org.slf4j:slf4j-simple:${slf4j_version}"
    testImplementation "org.amshove.kluent:kluent:${kluent_version}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_version}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit_version}"
  }

  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
  }

  jacocoTestReport {
    reports {
      xml.enabled = true
      html.enabled = true
    }

    afterEvaluate {
      getClassDirectories().setFrom(files(classDirectories.files.collect {
        fileTree(dir: it,
            excludes: ['io/etcd/recipes/examples/**'])
      }))
    }
  }

  check.dependsOn jacocoTestReport

  artifacts {
    archives sourcesJar
  }

  compileKotlin {
    kotlinOptions {
      jvmTarget = "1.8"
      freeCompilerArgs += ['-Xuse-experimental=kotlin.time.ExperimentalTime',
                           '-Xuse-experimental=kotlin.ExperimentalUnsignedTypes',
                           '-Xuse-experimental=kotlinx.serialization.ImplicitReflectionSerializer',
                           '-Xuse-experimental=kotlinx.serialization.UnstableDefault']
    }
  }

  compileTestKotlin {
    kotlinOptions {
      jvmTarget = "1.8"
      freeCompilerArgs += ['-Xuse-experimental=kotlin.time.ExperimentalTime',
                           '-Xuse-experimental=kotlin.ExperimentalUnsignedTypes',
                           '-Xuse-experimental=kotlinx.serialization.ImplicitReflectionSerializer',
                           '-Xuse-experimental=kotlinx.serialization.UnstableDefault']
    }
  }

  test {
    useJUnitPlatform()

    testLogging {
      events "passed", "skipped", "failed", "standardOut", "standardError"
      exceptionFormat "full"
      showStandardStreams = true
    }
  }
}