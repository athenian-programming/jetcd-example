plugins {
  id 'java'
  id 'org.jetbrains.kotlin.jvm' version '1.3.61' apply false
  id 'org.jetbrains.kotlin.plugin.serialization' version '1.3.61' apply false
  id "com.github.ben-manes.versions" version "0.27.0" apply false
  id 'jacoco'
  id 'com.github.kt3k.coveralls' version '2.8.4' apply false
}

repositories {
  maven { url = 'https://maven-central.storage-download.googleapis.com/repos/central/data/' }
  jcenter()
}

configurations.all {
  resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

allprojects {

}

subprojects {
  group 'com.github.pambrose.etcd-recipes'
  version '0.9.19'

  apply plugin: 'org.jetbrains.kotlin.jvm'
  apply plugin: 'org.jetbrains.kotlin.plugin.serialization'
  apply plugin: 'com.github.ben-manes.versions'

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  repositories {
    maven { url = 'https://maven-central.storage-download.googleapis.com/repos/central/data/' }
    jcenter()
    maven { url 'https://jitpack.io' }
  }

  def utilsVersion = '1.1.11'
  def serializationVersion = '0.13.0'
  def jetcdVersion = '0.4.1'
  def guavaVersion = '28.1-android'
  def loggingVersion = '1.7.8'
  def slf4jVersion = '1.7.28'
  def kluentVersion = '1.58'
  def junitVersion = '5.5.2'

  dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:${serializationVersion}"

    implementation "io.etcd:jetcd-all:${jetcdVersion}"
    implementation "com.google.guava:guava:${guavaVersion}"
    implementation "com.github.pambrose.common-utils:core-utils:${utilsVersion}"
    implementation "com.github.pambrose.common-utils:guava-utils:${utilsVersion}"

    implementation "io.github.microutils:kotlin-logging:${loggingVersion}"
    implementation "org.slf4j:slf4j-simple:${slf4jVersion}"

    testImplementation "org.amshove.kluent:kluent:${kluentVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
  }

  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
  }

  jacocoTestReport {
    reports {
      xml.enabled = true // coveralls plugin depends on xml format report
      html.enabled = true
    }
  }

  sourceSets {
    main {
      java {
        srcDirs 'src/main/java'
        srcDirs 'src/main/kotlin'
      }
    }
  }

  artifacts {
    archives sourcesJar
  }

  compileKotlin {
    kotlinOptions {
      jvmTarget = "1.8"
      freeCompilerArgs += ['-Xuse-experimental=kotlin.time.ExperimentalTime',
                           '-Xuse-experimental=kotlin.ExperimentalUnsignedTypes',
                           '-Xuse-experimental=kotlinx.serialization.ImplicitReflectionSerializer',
                           '-Xuse-experimental=kotlinx.serialization.UnstableDefault']
    }
  }

  compileTestKotlin {
    kotlinOptions {
      jvmTarget = "1.8"
      freeCompilerArgs += ['-Xuse-experimental=kotlin.time.ExperimentalTime',
                           '-Xuse-experimental=kotlin.ExperimentalUnsignedTypes',
                           '-Xuse-experimental=kotlinx.serialization.ImplicitReflectionSerializer',
                           '-Xuse-experimental=kotlinx.serialization.UnstableDefault']
    }
  }

  test {
    useJUnitPlatform()

    testLogging {
      events "passed", "skipped", "failed", "standardOut", "standardError"
      exceptionFormat "full"
      showStandardStreams = true
    }
  }
}