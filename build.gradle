plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.50'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.3.50'
    id "com.github.ben-manes.versions" version "0.27.0"
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.8.4'
}

group 'io.etcd'
version '0.9.14'

sourceCompatibility = 1.8
targetCompatibility = 1.8

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

def kotlinVersion = '1.3.50'
def serializationVersion = '0.13.0'
def jetcdVersion = '0.4.1'
def guavaVersion = '28.1-android'
def utilsVersion = '1.0.6'
def loggingVersion = '1.7.6'
def slf4jVersion = '1.7.28'
def kluentVersion = '1.56'
def junitVersion = '5.5.2'

repositories {
    maven { url "https://kotlin.bintray.com/kotlinx" }
    mavenCentral()
    jcenter()
    maven { url 'https://jitpack.io' }
}

dependencies {
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
    api "org.jetbrains.kotlinx:kotlinx-serialization-runtime:${serializationVersion}"
    api "io.etcd:jetcd-all:${jetcdVersion}"
    api "com.github.pambrose:common-utils:${utilsVersion}"
    implementation "com.google.guava:guava:${guavaVersion}"

    implementation "io.github.microutils:kotlin-logging:${loggingVersion}"
    implementation "org.slf4j:slf4j-simple:${slf4jVersion}"

    testImplementation "org.amshove.kluent:kluent:${kluentVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
            srcDirs 'src/main/kotlin'
        }
    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
//    archives javadocJar
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += ['-Xuse-experimental=kotlin.time.ExperimentalTime',
                             '-Xuse-experimental=kotlin.ExperimentalUnsignedTypes',
                             '-Xuse-experimental=kotlinx.serialization.UnstableDefault']
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += ['-Xuse-experimental=kotlin.time.ExperimentalTime',
                             '-Xuse-experimental=kotlin.ExperimentalUnsignedTypes',
                             '-Xuse-experimental=kotlinx.serialization.UnstableDefault']
    }
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
        showStandardStreams = true
    }
}